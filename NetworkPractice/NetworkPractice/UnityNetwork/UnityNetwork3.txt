3.1 소켓 프로그래밍을 시작하자

소켓(socket)이란? 
TCP와 UDP를 간단하게 다루기 위한 통신 API 
IP주소와 포트번호를 한 조로 통신 상대를 지정하고 통신함.
소켓으로 통신 할 때는 소켓이 지정한 포트에 전용 이더넷 포트를 만들고 , 통신 상대의 가상 이더넷 포트와 가상 케이블로 연결된 것 같은 상태로 통신한다.(같은 단말에서도 다른 애플리케이션과도 통신 가능)

{API(Application Programming Interface 애플리케이션 프로그래밍 인터페이스, 응용 프로그램 프로그래밍 인터페이스)
API는 컴퓨터나 컴퓨터 프로그램 사이의 연결이다. 일종의 소프트웨어 인터페이스이며 다른 종류의 소프트웨어에 서비스를 제공한다. }


TCP 소켓 프로그래밍 , UDP 소켓 프로그래밍 {TCP_Program,UDP_Program 두개 보기}

UDP는 Connect 함수를 사용하여 연결형으로써 Send와 Receive 함수를 사용할 수 있으며 어느 단말에서 온 데이터인지 식별할 필요가 없다.

but 비연결형으로써 하나의 소켓이 여러 소켓과도 통신할 수 있다. 


3.2 네트워크 바이트 오더 

2바이트 이상의 데이터를 송수신할 때는 바이트오더에 주의! 
바이트 오더란? >> 2바이트 이상의 데이터를 메모리에 배치하는 방식 
빅 엔디언 > 상위 바이트부터 차례로 배치
리틀 엔디언 > 하위 바이트부터 차례로 배치

엔디언은 프로세서에 따라 달라지는데 빅 엔디언 인지 리틀 엔디언 인지는 프로세서마다 다르기 때문에 만약 송수신 하는 프로세서가 다르다면 고려 필요함
만약 송신측이 빅이고 수신측이 리틀이며 변수와 메모리가 이와 같을 때

빅 엔디언							리틀 엔디언
변수 ---- 12 34 56 78				12 34 56 78
메모리    0x12345678				0x78563412 

송신측이 리틀 엔디언이고 수신측이 빅 엔디언 이라면 메모리의 순서를 바꿔서 보낸다(위의 빅 엔디언 같이)

처리할 프로세서의 바이트 오더를 호스트 바이트 오더라고 함. 

C#에는  IPAdress 클래스에 short int long 형의 바이트 오더를 변환하는
HostToNetworkOrder : 단말에서 데이터를 송신할 때 네트워크 바이트 오더로 변환
NetworkToHostOrder : 수신한 데이터를 수신한 단말의 엔디언으로 변환 
Int16 HostToNetworkOrder(Int16 val)
Int32 HostToNetworkOrder(Int32 val)
Int64 HostToNetworkOrder(Int64 val)


3.3 간단한 통신 라이브러리를 만들어보자.
(Socket 클래스를 래핑하는 간단한 라이브러리 만들기)

API검토
통신 라이브러리가 처리하는 것
1. 대기 시작(UDP는 수신 포트 지정만), 대기 종료
2. 접속, 접속 종료
3. 송신 , 수신 
이와 같은 처리를 하는 함수인 Socket 클래스의 인스턴스를 외부에서 참조할 수 없는 형태로 작성

1. 대기 시작, 대기 종료
대기하는 Bind 함수 , Listen 함수(TCP만)에는 각각 엔드 포인트, 최대 접속수가 필요
엔드 포인트에는 IP 주소와 포트 번호가 필요. 

2. 접속, 접속 종료
TCP의 Shutdown 함수와 Close 함수로 접속 종료 접속 종료할 때 각각의 함수를 호출함. 

3. 송신, 수신
Send와 Receive 함수 사용 

위 내용들은 NetworkLibrary에서 확인 가능.


이벤트 처리!
Socket클래스를 숨겨 라이브러리로 만들면 게임 프로그램은 Socket클래스를 참조할 수 없으므로 접속이나 오류 검출 불가.
그래서 라이브러리가 이벤트(ex. 접속,접속 종료, 오류 발생 이벤트)를 검출해서 게임 프로그램에 알려줘야함 이때 델리게이트 이용.

C#의 델리게이트란? 함수의 시그니처를 정의하는 형. 함숫값의 형과 인수의 파라미터가 일치하는 함수를 등록하고, 등록한 함수에 파라미터를 전달하여 호출. cpp의 함수 포인터나 콜백함수의 기능과 같음.

게임 프로그램은 오류 발생 시 호출할 함수를 통신 라이브러리에 등록하고 접속 및 오류 발생시 통신 라이브러리가 등록된 함수에 알리고, 게임 프로그램은 알림 내용에 따라 대응.

발생하는 이벤트들 
1. 접속
2. 접속 종료
3. 송신 오류
4. 수신 오류
